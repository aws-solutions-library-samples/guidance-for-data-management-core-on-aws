import { Stack } from 'aws-cdk-lib';
import { ArnPrincipal, CompositePrincipal, Effect, ManagedPolicy, PolicyStatement, Role, ServicePrincipal } from 'aws-cdk-lib/aws-iam';
import { StringParameter } from 'aws-cdk-lib/aws-ssm';
import { NagSuppressions } from 'cdk-nag';
import { Construct } from 'constructs';

export interface IAMConstructProperties {}

export const identityStoreRoleParameter = `/dm-demo/management/identityStoreRole`;

export class IAMConstruct extends Construct {
	constructor(scope: Construct, id: string, props: IAMConstructProperties) {
		super(scope, id);

		const accountId = Stack.of(this).account;

		/**
		 * Create the role for root access to identity store.
		 * In a production setup, this role would need to be created in the management account (where Identity Center resides)
		 */
		const identityStoreRole = new Role(this, 'identityStoreRole', {
			assumedBy: new ArnPrincipal(`arn:aws:iam::${accountId}:root`),
		});
		const identityStorePolicy = new PolicyStatement({
			actions: ['identitystore:IsMemberInGroups', 'identitystore:GetUserId'],
			effect: Effect.ALLOW,
			resources: ['*'],
		});
		identityStoreRole.addToPolicy(identityStorePolicy);

		new StringParameter(this, 'identityStoreRoleParameter', {
			parameterName: identityStoreRoleParameter,
			stringValue: identityStoreRole.roleArn,
		});

		NagSuppressions.addResourceSuppressions(
			[identityStoreRole],
			[
				{
					id: 'AwsSolutions-IAM5',
					appliesTo: ['Resource::*'],
					reason: 'The resource condition in the IAM policy is generated by CDK, this only applies to xray:PutTelemetryRecords and xray:PutTraceSegments actions.',
				},
			],
			true
		);
	}
}
