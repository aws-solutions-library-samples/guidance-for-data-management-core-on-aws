import { Stack, StackProps } from 'aws-cdk-lib';
import type { Construct } from 'constructs';
import { RedShiftConstruct } from './redshift.construct.js';
import { NetworkConstruct } from './network.construct.js';
import { NagSuppressions } from 'cdk-nag';

export type DemoSpokeStackProperties = StackProps & {
	dataZoneDomainId: string;
	dataZoneProjectId: string;
};

export class DemoSpokeStack extends Stack {
	constructor(scope: Construct, id: string, props: DemoSpokeStackProperties) {
		super(scope, id, props);

		// Setup network and endpoints
		const network = new NetworkConstruct(this, 'NetworkConstruct', {});

		// Deploy redshift
		if (props?.dataZoneDomainId && props?.dataZoneProjectId) {
			new RedShiftConstruct(this, 'RedshiftConstruct', {
				vpc: network.vpc,
				dataZoneDomainId: props.dataZoneDomainId,
				dataZoneProjectId: props.dataZoneProjectId,
				deleteRedshift: true,
			});

			NagSuppressions.addResourceSuppressionsByPath(
				this,
				['/DemoSpokeStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/Resource'],
				[
					{
						id: 'AwsSolutions-IAM4',
						appliesTo: ['Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'],
						reason: 'This policy attached to the role is generated by CDK.',
					},
					{
						id: 'AwsSolutions-IAM5',
						appliesTo: ['Resource::*'],
						reason: 'This resource condition in the IAM policy is generated by CDK, this only applies to logs:DeleteRetentionPolicy and logs:PutRetentionPolicy actions.',
					},
				],
				true
			);
		}
	}
}
